#include<bits/stdc++.h>
using namespace std;
struct INTERVAL_DATA{
    int left,right,Max,lazy;
    INTERVAL_DATA(){
        left=right=0;
        lazy=0;
        Max=0;
    }
};
INTERVAL_DATA tree[3000000];
struct INTERVAL_TREE{
    int n;
    INTERVAL_TREE(int height){
        n=height;

        int h=0;
        tree[0].left=0;tree[0].right=(1<<n)-1;
        for (int i=0;i<((1<<n)-1);i++){
            if (i>(2<<h)-2) h++;
            tree[i*2+1].left=tree[i].left;
            tree[i*2+2].left=(1<<(n-h-1))|tree[i].left;
            tree[i*2+1].right=tree[i*2+1].left+(1<<(n-h-1))-1;
            tree[i*2+2].right=tree[i*2+2].left+(1<<(n-h-1))-1;
        }
        for (int i=0;i<(2<<n)-1;i++){
            tree[i].left++;
            tree[i].right++;
        }
    }
    void add(int root,int l,int r,int x){
        if (l==tree[root].left&&r==tree[root].right) tree[root].lazy+=x;
        else {
            int mid=(tree[root].left+tree[root].right)>>1;
            tree[root*2+1].lazy+=tree[root].lazy;
            tree[root*2+2].lazy+=tree[root].lazy;
            tree[root].lazy=0;

            if (l>mid) add(root*2+2,l,r,x);
            else if (r<=mid) add(root*2+1,l,r,x);
            else {
                add(root*2+1,l,mid,x);
                add(root*2+2,mid+1,r,x);
            }

            tree[root].Max=max(tree[root*2+1].lazy+tree[root*2+1].Max,tree[root*2+2].lazy+tree[root*2+2].Max);
        }
    }
    int getMax(int root,int l,int r){
        if (tree[root].left==l&&tree[root].right==r) return tree[root].Max+tree[root].lazy;
        else {
            int mid=(tree[root].left+tree[root].right)>>1;
            tree[root*2+1].lazy+=tree[root].lazy;
            tree[root*2+2].lazy+=tree[root].lazy;
            tree[root].Max+=tree[root].lazy;
            tree[root].lazy=0;

            if (l>mid) return getMax(root*2+2,l,r);
            if (r<=mid) return getMax(root*2+1,l,r);
            return max(getMax(root*2+1,l,mid),getMax(root*2+2,mid+1,r));
        }
    }
} a(20);
int main(){
    int n,m,x,y,z;
    scanf("%d%d",&n,&m);
    for (int i=0;i<n;i++){
        scanf("%d",&x);
        a.add(0,i+1,i+1,-x);
    }
    return 0;
}
